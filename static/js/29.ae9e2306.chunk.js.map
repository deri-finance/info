{"version":3,"sources":["desktop/pages/Info/Detail.js","utils/DeriNumberFormat.js","desktop/pages/Info/Table.js","desktop/pages/Info/Chart.js"],"names":["LIQUIDITY_HEADER","LIQUIDITY_COLUMNS","GET_LIQUIDITY_URL","process","TRADE_HEADER","TRADE_COLUMNS","columnFormat","account","data","formatAddress","timestamp","moment","Date","format","notional","value","prefix","thousandSeparator","decimalScale","amount","suffix","bToken","price","direction","className","action","Detail","useParams","network","add","catalog","getLiquidityDataUrl","getTradeDataUrl","style","window","screen","width","to","toUpperCase","title","url","seriesType","headers","columns","columnRenders","pagination","DeriNumberFormat","props","useState","renderablity","setRenderablity","useEffect","allowZero","others","undefined","isNaN","Math","abs","console","log","displayType","inject","observer","dataSet","loading","onRowClick","setData","page","setPage","count","setCount","pageSize","loadData","a","restUrl","axios","get","res","status","Array","isArray","floor","loaded","map","header","length","d","onClick","cursor","col","call","AreaSeries","chartRef","useRef","series","curValue","setCurValue","curDate","setCurDate","lastDataRef","crosshairMove","param","point","current","seriesPrices","forEach","item","time","year","month","day","addAreaSeries","chart","areaSeries","priceLineVisible","lastValueVisible","topColor","bottomColor","lineColor","priceFormat","precision","minMove","sort","item1","item2","dateFormat","last","timeScale","fitContent","addHistogramSeries","histogramSeries","color","type","priceFormatter","scaleMargins","top","bottom","Number","rect","document","querySelector","getBoundingClientRect","createChart","localization","convertToInternationalCurrencySystem","locale","rightOffset","leftOffset","timeVisible","borderColor","borderVisible","height","priceScale","position","mode","handleScroll","handleScale","crosshair","CrosshairMode","Normal","vertLine","labelVisible","visible","horzLine","grid","vertLines","horzLines","layout","backgroundColor","textColor","fontSize","initChart","subscribeCrosshairMove","unsubscribeCrosshairMove","removeSeries","remove","ref"],"mappings":"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","file":"static/js/29.ae9e2306.chunk.js","sourcesContent":["\nimport './info.less'\nimport Table from './Table'\nimport { useParams } from 'react-router-dom'\nimport { formatAddress } from '../../../utils/utils'\nimport DeriNumberFormat from '../../../utils/DeriNumberFormat'\nimport moment from 'moment'\nimport Chart from './Chart'\nimport { Link } from 'react-router-dom'\n\nconst LIQUIDITY_HEADER = ['ACTION','ACCOUNT','LIQUIDITY','AMOUNT','TIMESTAMP (UTC+8)']\nconst LIQUIDITY_COLUMNS = ['action','account','notional','amount','timestamp']\nconst GET_LIQUIDITY_URL = `${process.env.REACT_APP_INFO_HTTP_URL}`\n\nconst TRADE_HEADER = ['DIRECTION','ACCOUNT','SYMBOL','PRICE','VOLUME','NOTIONAL','TIMESTAMP (UTC+8)']\nconst TRADE_COLUMNS = ['direction','account','symbol','price','volume','notional','timestamp']\n\n\nconst columnFormat = {\n  account : data => formatAddress(data.account),\n  timestamp : data =>  moment(new Date(data.timestamp * 1000)).format('YYYY-MM-DD HH:mm:ss'),\n  notional : data => <DeriNumberFormat value={data.notional} prefix='$' thousandSeparator={true} decimalScale={5}/>,  \n  amount : data =>  <DeriNumberFormat value={data.amount} suffix={` ${data.bToken}`} thousandSeparator={true} decimalScale={5}/> ,\n  price : data =>  <DeriNumberFormat value={data.price} thousandSeparator={true}  decimalScale={5}/>,\n  direction : data => <span className={`direction ${data.direction}`}>{data.direction}</span>,\n  action : data => <span className={`action ${data.action}`}>{data.action}</span>\n}\n\n\nexport default function Detail(){\n  const {network,add,catalog,bToken} =  useParams();\n  const getLiquidityDataUrl = `${GET_LIQUIDITY_URL}/get_liquidity?pool=${add}`\n  const getTradeDataUrl = `${GET_LIQUIDITY_URL}/get_trade?pool=${add}`\n\n  return(\n    <div className='info' style={{'width': `calc(100vw - ${window.screen.width * 0.25}px)`}}>\n    <div className='title'><Link to='/info'>Deri Overview</Link> &gt; {`${network} - ${catalog.toUpperCase()} - ${formatAddress(add)} (${bToken})`}</div>\n      <div className='chart-box'>\n        <div className='chart'><Chart title='TVL' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_liquidity_history?pool=${add}`} seriesType='area'/> </div>\n        <div className='chart'><Chart title='Volume 24H' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_trade_history?pool=${add}`} seriesType='histogram'/> </div>\n      </div>\n      <div className='table-by-network'>\n        <Table title='LIQUIDITY' headers={LIQUIDITY_HEADER} columns={LIQUIDITY_COLUMNS} columnRenders={columnFormat} url={getLiquidityDataUrl} pagination={true}/>\n        <Table title='TRADE' headers={TRADE_HEADER} columns={TRADE_COLUMNS} columnRenders={columnFormat}  url={getTradeDataUrl} pagination={true}/>\n      </div>\n    </div>\n  )\n}","import React,{useState,useEffect} from 'react'\nimport NumberFormat from 'react-number-format'\n\nexport default function DeriNumberFormat(props){\n  const [renderablity, setRenderablity] = useState(<span className='loading-line'></span>);\n\n  useEffect(() => {\n    const {allowZero,...others} = props \n    if(((typeof props.value !== 'object' && props.value !== undefined && props.value !== '' && props.value !== 'NaN') || ((isNaN(props.value) && Math.abs(props.value)) === 0 && allowZero === true ))) {\n      console.log(props.value)\n      console.log(props)\n      setRenderablity(<NumberFormat {...others} displayType = 'text' />)\n    } \n    return () => {};\n  }, [props.value]);\n\n  return renderablity;\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { inject, observer } from 'mobx-react'\n\nfunction Table({title,dataSet,url,headers,columns,columnRenders = {},pagination,loading,onRowClick}){\n  const [data, setData] = useState([])\n  const [page, setPage] = useState(1)\n  const [count, setCount] = useState()\n  const [pageSize, setPageSize] = useState(10)\n\n  const loadData = async (url,page) => {\n    let restUrl = url;\n    if(pagination){\n      restUrl = `${restUrl}&page=${page}&page_amount=${pageSize}`\n    }\n    loading.loading()\n    const res = await axios.get(restUrl);\n    if(res.status === 200 && Array.isArray(res.data.data)){\n      setCount(res.data.count / pageSize)\n      if(res.data.count % pageSize > 0 ){\n        setCount(Math.floor(res.data.count / pageSize) +1)\n      }\n      setData(res.data.data)\n      setPage(page)\n      loading.loaded()\n    }\n  }\n\n  const prePage = () => {\n    if(page === 1){\n      return;\n    }\n    loadData(url,page - 1)\n  }\n  const nextPage = () => {\n    if(page === count){\n      return;\n    }\n\n    loadData(url,page +1)\n  }\n\n  useEffect(() => {\n    if(dataSet){\n      setData(dataSet)\n    } else {\n      loadData(url,1);\n    }\n  }, [url])\n  return(\n    <div className='info-table'>\n      <div className='t-title'>{title}</div>\n      <div className='tbody'>\n        <div className='theader'>\n          {headers.map(header => <div className='col'>{header}</div>)}\n        </div>\n        {data.length > 0 ? data.map(d => (\n          <div className='row' onClick={() => onRowClick && onRowClick(d)} style={{cursor : onRowClick ? 'pointer' : 'normal'}}>\n            {columns.map(col => <div className='col'>{columnRenders[col] ? columnRenders[col].call(null,d) :d[col]}</div>)}\n          </div>))\n          :\n          <div className='row'><div className='col no-data'>No Data</div></div>\n          }\n         \n\n        {pagination && data.length > 0 && <div className='pagination row'>\n          <span className='arrow' onClick={prePage}> &lt; </span><span>Page {page} of {count}</span><span className='arrow' onClick={nextPage}> &gt; </span>\n        </div>}\n      </div>\n    </div>\n  )\n}\nexport default inject('loading')(observer(Table))","import { useRef,useEffect,useState } from \"react\"\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport dateFormat from 'dateformat'\nimport { convertToInternationalCurrencySystem } from \"../../../utils/utils\";\n\nexport default function AreaSeries({title,url,seriesType}){\n  const chartRef = useRef(null);\n  const series = useRef(null)\n  const [curValue, setCurValue] = useState('')\n  const [curDate, setCurDate] = useState('')\n  const lastDataRef = useRef()\n\n  const initChart = () => {\n    const rect = document.querySelector('.info-chart').getBoundingClientRect()\n    const chart = createChart(chartRef.current, { \n      localization : {\n        priceFormatter: price => '$ ' + convertToInternationalCurrencySystem(price),\n        locale: 'en-US'\n      },\n      timeScale: {\n        rightOffset : 0,\n        leftOffset : 5,\n        timeVisible : true,\n        borderColor : '#fff',\n        borderVisible :  false\n      },\n      width: rect.width,\n      height: rect.height,\n      priceScale: {\n        position: 'none',\n        borderColor: '#fff',\n        borderVisible : false,\n        mode: 0,\n        scaleMargins: {\n          top: 0.3,\n          bottom: 0.01\n        },\n      },\n\n      handleScroll: false,\n      handleScale: false,\n      crosshair: {\n        mode: CrosshairMode.Normal,  \n        vertLine: {\n          labelVisible : false,  \n          visible : false\n        },\n        horzLine: {\n          labelVisible : false,  \n          visible : false\n        },\n      },\n      grid: {\n        vertLines: {\n          visible: false,\n        },\n        horzLines: {\n          visible: false,\n        },\n      },\n      layout: {\n        backgroundColor: '#212327',\n        textColor: '#fff',\n        fontSize: 12\n      },\n    });\n    return chart;\n  }\n\n  const crosshairMove = param => {\n      if (!param.point) {\n        setCurDate('')\n        if(lastDataRef.current){\n          setCurValue(lastDataRef.current.value)\n        }\n        return;\n      }\n      param.seriesPrices.forEach(item => {\n        if(item){\n          setCurValue(item)\n        }\n      })\n      param.time && setCurDate(`${param.time.year}-${param.time.month}-${param.time.day} (UTC+8)`)\n  }\n\n  const addAreaSeries = async(chart) => {\n    const areaSeries = chart.addAreaSeries({\n      priceLineVisible : false,\n      lastValueVisible: false,\n      topColor: 'RGBA(0,101,159,.5)',\n      bottomColor: 'RGBA(0,101,159,0)',\n      lineColor: 'RGB(0,101,159)',\n      priceFormat: {        \n        precision: 1,\n        minMove : '1000',\n      }\n    })\n  \n    \n    const res = await axios.get(url)\n    if(res.status === 200 && Array.isArray(res.data.data)){\n      let data = res.data.data.sort((item1,item2) => {\n        if(item1.timestamp > item2.timestamp) {\n          return 1\n        } else if(item1.timestamp < item2.timestamp){\n          return -1\n        } else {\n          return 0\n        }\n      })\n      data = data.map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : d.value}))\n      areaSeries.setData(data)\n      const last = data[data.length -1]\n      setCurValue(last.value)\n      lastDataRef.current = last\n    }\n    series.current = areaSeries\n    chart.timeScale().fitContent();\n    return areaSeries;\n  }\n\n  const addHistogramSeries = async (chart) => {\n    const histogramSeries = chart.addHistogramSeries({\n      color: '#00659F',\n      priceLineVisible : false,\n      lastValueVisible: false,\n      priceFormat: {\n        type: \"volume\",\n        priceFormatter: price => '$ ' + price\n      },\n      scaleMargins: {\n        top: 0.2,\n        bottom: 0\n      }\n    })\n    const res = await axios.get(url)\n    if(res.status === 200 && Array.isArray(res.data.data)){\n      const data = res.data.data.sort((item1,item2) => {\n        if(item1.timestamp > item2.timestamp) {\n          return 1\n        } else if(item1.timestamp < item2.timestamp){\n          return -1\n        } else {\n          return 0\n        }\n      }).map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : Number(d.value)}))\n      \n      histogramSeries.setData(data)\n      const last = data[data.length -1]\n      setCurValue(last.value)\n      lastDataRef.current = last\n    }\n    series.current = histogramSeries\n    chart.timeScale().fitContent();\n    return histogramSeries;\n  }\n\n  useEffect(() => {\n    const chart = initChart();\n    if(seriesType === 'area'){\n      addAreaSeries(chart)\n    }\n    if(seriesType === 'histogram'){\n      addHistogramSeries(chart)\n    }\n    chart.subscribeCrosshairMove(crosshairMove);\n    return () => {\n      if(chart){\n        chart.unsubscribeCrosshairMove(crosshairMove)\n        if(series.current){\n          chart.removeSeries(series.current);\n        }\n        chart.remove();\n      }\n    }\n  }, [url,seriesType])\n\n  return(\n    <div className='info-chart'>\n      <div className='chart-title'>\n        <div className='title-label'>{title}</div>\n        <div className='title-value'>{curValue ? `$${convertToInternationalCurrencySystem(curValue)}` : ''} </div>\n        <div className='title-date'>{curDate} </div>\n        </div>\n      <div className='series' ref={chartRef}></div>\n    </div>\n  )\n}\n"],"sourceRoot":""}