{"version":3,"sources":["desktop/pages/Info/Detail.js","utils/DeriNumberFormat.js","desktop/pages/Info/Table.js","desktop/pages/Info/Chart.js"],"names":["LIQUIDITY_HEADER","LIQUIDITY_COLUMNS","GET_LIQUIDITY_URL","process","TRADE_HEADER","TRADE_COLUMNS","columnFormat","account","data","formatAddress","timestamp","moment","Date","utc","format","notional","value","prefix","thousandSeparator","decimalScale","amount","suffix","bToken","price","direction","className","action","Detail","useParams","network","add","catalog","getLiquidityDataUrl","getTradeDataUrl","to","toUpperCase","title","url","seriesType","cycle","defaultCycle","headers","columns","columnRenders","pagination","DeriNumberFormat","props","useState","renderablity","setRenderablity","useEffect","allowZero","others","undefined","isNaN","Math","abs","displayType","inject","observer","dataSet","loading","onRowClick","setData","page","setPage","count","setCount","pageSize","loadData","a","restUrl","axios","get","res","status","Array","isArray","floor","loaded","map","header","index","length","d","onClick","style","cursor","col","call","AreaSeries","chartRef","useRef","seriesChartRef","series","curValue","setCurValue","curDate","setCurDate","curCycle","setCurCycle","lastDataRef","crosshairMove","param","point","current","seriesPrices","forEach","item","time","year","month","day","addAreaSeries","chart","areaSeries","priceLineVisible","lastValueVisible","topColor","bottomColor","lineColor","priceFormat","precision","minMove","sort","item1","item2","dateFormat","last","timeScale","fitContent","loadHistogramData","histogramSeries","Number","last_24h","addHistogramSeries","color","type","priceFormatter","priceScale","applyOptions","scaleMargins","top","bottom","rect","document","querySelector","getBoundingClientRect","createChart","localization","convertToInternationalCurrencySystem","locale","rightOffset","leftOffset","timeVisible","borderColor","borderVisible","width","height","position","mode","handleScroll","handleScale","crosshair","CrosshairMode","Normal","vertLine","labelVisible","visible","horzLine","grid","vertLines","horzLines","layout","backgroundColor","textColor","fontSize","initChart","subscribeCrosshairMove","unsubscribeCrosshairMove","removeSeries","remove","test","cycleSelect","ref"],"mappings":"8HACA,wIASMA,EAAmB,CAAC,SAAS,UAAU,YAAY,SAAS,mBAC5DC,EAAoB,CAAC,SAAS,UAAU,WAAW,SAAS,aAC5DC,EAAiB,UAAMC,gCAEvBC,EAAe,CAAC,YAAY,UAAU,SAAS,QAAQ,SAAS,WAAW,mBAC3EC,EAAgB,CAAC,YAAY,UAAU,SAAS,QAAQ,SAAS,WAAW,aAG5EC,EAAe,CACnBC,QAAU,SAAAC,GAAI,OAAIC,YAAcD,EAAKD,UACrCG,UAAY,SAAAF,GAAI,OAAKG,IAAO,IAAIC,KAAsB,IAAjBJ,EAAKE,YAAmBG,MAAMC,OAAO,wBAC1EC,SAAW,SAAAP,GAAI,OAAI,cAAC,IAAD,CAAkBQ,MAAOR,EAAKO,SAAUE,OAAO,IAAIC,mBAAmB,EAAMC,aAAc,KAC7GC,OAAS,SAAAZ,GAAI,OAAK,cAAC,IAAD,CAAkBQ,MAAOR,EAAKY,OAAQC,OAAM,WAAMb,EAAKc,QAAUJ,mBAAmB,EAAMC,aAAc,KAC1HI,MAAQ,SAAAf,GAAI,OAAK,cAAC,IAAD,CAAkBQ,MAAOR,EAAKe,MAAOL,mBAAmB,EAAOC,aAAc,KAC9FK,UAAY,SAAAhB,GAAI,OAAI,sBAAMiB,UAAS,oBAAejB,EAAKgB,WAAnC,SAAiDhB,EAAKgB,aAC1EE,OAAS,SAAAlB,GAAI,OAAI,sBAAMiB,UAAS,iBAAYjB,EAAKkB,QAAhC,SAA2ClB,EAAKkB,WAIpD,SAASC,IACtB,MAAsCC,sBAA/BC,EAAP,EAAOA,QAAQC,EAAf,EAAeA,IAAIC,EAAnB,EAAmBA,QAAQT,EAA3B,EAA2BA,OACrBU,EAAmB,UAAM9B,EAAN,+BAA8C4B,GACjEG,EAAe,UAAM/B,EAAN,2BAA0C4B,GAE/D,OACE,sBAAKL,UAAU,OAAf,UACA,sBAAKA,UAAU,QAAf,UAAuB,cAAC,IAAD,CAAMS,GAAG,QAAT,2BAAvB,gBAAsEL,EAAtE,cAAmFE,EAAQI,cAA3F,cAA8G1B,YAAcqB,GAA5H,aAAqIR,EAArI,QACE,sBAAKG,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UAAuB,cAAC,IAAD,CAAOW,MAAM,MAAMC,IAAG,UAAOlC,+BAAP,uCAAyE2B,GAAOQ,WAAW,SAAxI,OACA,sBAAKb,UAAU,QAAf,UAAuB,cAAC,IAAD,CAAOW,MAAM,aAAaC,IAAG,UAAOlC,+BAAP,mCAAqE2B,GAAOQ,WAAW,YAAYC,MAAO,CAAC,IAAI,KAAMC,aAAa,MAAtL,UAEF,sBAAKf,UAAU,mBAAf,UACE,cAAC,IAAD,CAAOW,MAAM,YAAYK,QAASzC,EAAkB0C,QAASzC,EAAmB0C,cAAerC,EAAc+B,IAAKL,EAAqBY,YAAY,IACnJ,cAAC,IAAD,CAAOR,MAAM,QAAQK,QAASrC,EAAcsC,QAASrC,EAAesC,cAAerC,EAAe+B,IAAKJ,EAAiBW,YAAY,Y,+ICxC7H,SAASC,EAAiBC,GACvC,MAAwCC,mBAAS,sBAAMtB,UAAU,kBAAjE,mBAAOuB,EAAP,KAAqBC,EAArB,KAUA,OARAC,qBAAU,WACR,IAAOC,EAAuBL,EAAvBK,UAAaC,EAApB,YAA8BN,EAA9B,GAIA,OAH4B,WAAvB,YAAOA,EAAM9B,aAAsCqC,IAAhBP,EAAM9B,OAAuC,KAAhB8B,EAAM9B,OAAgC,QAAhB8B,EAAM9B,OAAuE,KAAjDsC,MAAMR,EAAM9B,QAAUuC,KAAKC,IAAIV,EAAM9B,UAA+B,IAAdmC,IAC3KF,EAAgB,cAAC,IAAD,2BAAkBG,GAAlB,IAA0BK,YAAc,WAEnD,eACN,CAACX,EAAM9B,QAEHgC,I,kIC0DMU,gBAAO,UAAPA,CAAkBC,aApEjC,YAAqG,IAArFvB,EAAoF,EAApFA,MAAMwB,EAA8E,EAA9EA,QAAQvB,EAAsE,EAAtEA,IAAII,EAAkE,EAAlEA,QAAQC,EAA0D,EAA1DA,QAA0D,IAAlDC,qBAAkD,MAAlC,GAAkC,EAA/BC,EAA+B,EAA/BA,WAAWiB,EAAoB,EAApBA,QAAQC,EAAY,EAAZA,WACtF,EAAwBf,mBAAS,IAAjC,mBAAOvC,EAAP,KAAauD,EAAb,KACA,EAAwBhB,mBAAS,GAAjC,mBAAOiB,EAAP,KAAaC,EAAb,KACA,EAA0BlB,qBAA1B,mBAAOmB,EAAP,KAAcC,EAAd,KACA,EAAgCpB,mBAAS,IAAzC,mBAAOqB,EAAP,KAEMC,GAFN,KAEc,uCAAG,WAAOhC,EAAI2B,GAAX,iBAAAM,EAAA,6DACXC,EAAUlC,EACXO,IACD2B,EAAO,UAAMA,EAAN,iBAAsBP,EAAtB,wBAA0CI,IAEnDP,EAAQA,UALO,SAMGW,IAAMC,IAAIF,GANb,OAOG,OADZG,EANS,QAORC,QAAkBC,MAAMC,QAAQH,EAAIlE,KAAKA,QAC9C2D,EAASO,EAAIlE,KAAK0D,MAAQE,GACvBM,EAAIlE,KAAK0D,MAAQE,EAAW,GAC7BD,EAASZ,KAAKuB,MAAMJ,EAAIlE,KAAK0D,MAAQE,GAAW,GAElDL,EAAQW,EAAIlE,KAAKA,MACjByD,EAAQD,GACRH,EAAQkB,UAdK,2CAAH,yDAuCd,OAPA7B,qBAAU,WACLU,EACDG,EAAQH,GAERS,EAAShC,EAAI,KAEd,CAACA,IAEF,sBAAKZ,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BW,IAC1B,sBAAKX,UAAU,QAAf,UACE,qBAAKA,UAAU,UAAf,SACGgB,EAAQuC,KAAI,SAACC,EAAOC,GAAR,OAAkB,qBAAKzD,UAAU,MAAf,SAAkCwD,GAARC,QAE1D1E,EAAK2E,OAAS,EAAI3E,EAAKwE,KAAI,SAACI,EAAEF,GAAH,OAC1B,qBAAKzD,UAAU,MAAkB4D,QAAS,kBAAMvB,GAAcA,EAAWsB,IAAIE,MAAO,CAACC,OAASzB,EAAa,UAAY,UAAvH,SACGpB,EAAQsC,KAAI,SAACQ,EAAIN,GAAL,OAAe,qBAAKzD,UAAU,MAAf,SAAkCkB,EAAc6C,GAAO7C,EAAc6C,GAAKC,KAAK,KAAKL,GAAIA,EAAEI,IAAhEN,OAD9BA,MAI1B,qBAAKzD,UAAU,MAAf,SAAqB,qBAAKA,UAAU,cAAf,uBAItBmB,GAAcpC,EAAK2E,OAAS,GAAK,sBAAK1D,UAAU,iBAAf,UAChC,sBAAMA,UAAU,QAAQ4D,QAtChB,WACF,IAATrB,GAGHK,EAAShC,EAAI2B,EAAO,IAkCd,iBAAuD,yCAAYA,EAAZ,OAAsBE,KAAa,sBAAMzC,UAAU,QAAQ4D,QAhCzG,WACZrB,IAASE,GAIZG,EAAShC,EAAI2B,EAAM,IA2B6E,+B,yKC5DrF,SAAS0B,EAAT,GAA+D,IAA1CtD,EAAyC,EAAzCA,MAAMC,EAAmC,EAAnCA,IAAIC,EAA+B,EAA/BA,WAAWC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,aACvDmD,EAAWC,iBAAO,MAClBC,EAAiBD,iBAAO,MACxBE,EAASF,iBAAO,MACtB,EAAgC7C,mBAAS,IAAzC,mBAAOgD,EAAP,KAAiBC,EAAjB,KACA,EAA8BjD,mBAAS,IAAvC,mBAAOkD,EAAP,KAAgBC,EAAhB,KACA,EAAgCnD,mBAASP,GAAzC,mBAAO2D,EAAP,KAAiBC,EAAjB,KACMC,EAAcT,mBA6DdU,EAAgB,SAAAC,GAClB,IAAKA,EAAMC,MAKT,OAJAN,EAAW,SACRG,EAAYI,SACbT,EAAYK,EAAYI,UAI5BF,EAAMG,aAAaC,SAAQ,SAAAC,GACtBA,GACDZ,EAAYY,MAGhBL,EAAMM,MAAQX,EAAW,GAAD,OAAIK,EAAMM,KAAKC,KAAf,YAAuBP,EAAMM,KAAKE,MAAlC,YAA2CR,EAAMM,KAAKG,IAAtD,YAGtBC,EAAa,uCAAG,WAAMC,GAAN,qBAAA5C,EAAA,6DACd6C,EAAaD,EAAMD,cAAc,CACrCG,kBAAmB,EACnBC,kBAAkB,EAClBC,SAAU,qBACVC,YAAa,oBACbC,UAAW,iBACXC,YAAa,CACXC,UAAW,EACXC,QAAU,UATM,SAcFnD,IAAMC,IAAIpC,GAdR,cAeF,OADZqC,EAdc,QAebC,QAAkBC,MAAMC,QAAQH,EAAIlE,KAAKA,QAU9CA,GATIA,EAAOkE,EAAIlE,KAAKA,KAAKoH,MAAK,SAACC,EAAMC,GACnC,OAAGD,EAAMnH,UAAYoH,EAAMpH,UAClB,EACCmH,EAAMnH,UAAYoH,EAAMpH,WACxB,EAED,MAGCsE,KAAI,SAAAI,GAAC,MAAK,CAACyB,KAAOkB,IAAW,IAAInH,KAAmB,IAAdwE,EAAE1E,WAAkB,cAAcM,MAAQoE,EAAEpE,UAC9FmG,EAAWpD,QAAQvD,GACbwH,EAAOxH,EAAKA,EAAK2E,OAAQ,GAAGnE,MAClCgF,EAAYgC,GACZ3B,EAAYI,QAAUuB,GAExBlC,EAAOW,QAAUU,EACjBD,EAAMe,YAAYC,aAhCE,kBAiCbf,GAjCa,2CAAH,sDAoCbgB,EAAiB,uCAAG,WAAO9F,EAAI+F,GAAX,mBAAA9D,EAAA,sEACNE,IAAMC,IAAIpC,GADJ,OAEN,OADZqC,EADkB,QAEjBC,QAAkBC,MAAMC,QAAQH,EAAIlE,KAAKA,QACxCA,EAAOkE,EAAIlE,KAAKA,KAAKoH,MAAK,SAACC,EAAMC,GACrC,OAAGD,EAAMnH,UAAYoH,EAAMpH,UAClB,EACCmH,EAAMnH,UAAYoH,EAAMpH,WACxB,EAED,KAERsE,KAAI,SAAAI,GAAC,MAAK,CAACyB,KAAOkB,IAAW,IAAInH,KAAmB,IAAdwE,EAAE1E,WAAkB,cAAcM,MAAQqH,OAAOjD,EAAEpE,WACtFgH,EAAOtD,EAAIlE,KAAK8H,SAAW5D,EAAIlE,KAAK8H,SAAW5D,EAAIlE,KAAKA,EAAK2E,OAAQ,GAAGnE,MAC9EoH,EAAgBrE,QAAQvD,GACxBwF,EAAYgC,GACZ3B,EAAYI,QAAUuB,EACtBnC,EAAeY,SAAWZ,EAAeY,QAAQwB,YAAYC,cAhBvC,2CAAH,wDAoBjBK,EAAkB,uCAAG,WAAOrB,GAAP,eAAA5C,EAAA,6DACnB8D,EAAkBlB,EAAMqB,mBAAmB,CAC/CC,MAAO,UACPpB,kBAAmB,EACnBC,kBAAkB,EAClBI,YAAa,CACXgB,KAAM,SACNC,eAAgB,SAAAnH,GAAK,MAAI,KAAOA,OAGpBoH,aAAaC,aAAa,CACxCC,aAAc,CACZC,IAAK,IACLC,OAAQ,KAGZZ,EAAkB9F,EAAI+F,GACtBtC,EAAOW,QAAU2B,EAjBQ,kBAkBlBA,GAlBkB,2CAAH,sDA+CxB,OApBAlF,qBAAU,WACR,IAAMgE,EA9JU,WAChB,IAAM8B,EAAOC,SAASC,cAAc,eAAeC,wBAC7CjC,EAAQkC,YAAYzD,EAASc,QAAS,CAC1C4C,aAAe,CACbX,eAAgB,SAAAnH,GAAK,MAAI,KAAO+H,YAAqC/H,IACrEgI,OAAQ,SAEVtB,UAAW,CACTuB,YAAc,EACdC,WAAa,EACbC,aAAc,EACdC,YAAc,OACdC,eAAiB,GAEnBC,MAAOb,EAAKa,MACZC,OAAQ,IACRnB,WAAY,CACVoB,SAAU,OACVJ,YAAa,OACbC,eAAgB,EAChBI,KAAM,EACNnB,aAAc,CACZC,IAAK,MAKTmB,cAAc,EACdC,aAAa,EACbC,UAAW,CACTH,KAAMI,IAAcC,OACpBC,SAAU,CACRC,cAAe,EACfC,SAAU,GAEZC,SAAU,CACRF,cAAe,EACfC,SAAU,IAGdE,KAAM,CACJC,UAAW,CACTH,SAAS,GAEXI,UAAW,CACTJ,SAAS,IAGbK,OAAQ,CACNC,gBAAiB,UACjBC,UAAW,OACXC,SAAU,MAId,OADAnF,EAAeY,QAAUS,EAClBA,EAuGO+D,GAQd,MAPkB,SAAf3I,GACD2E,EAAcC,GAEE,cAAf5E,GACDiG,EAAmBrB,GAErBA,EAAMgE,uBAAuB5E,GACtB,WACFY,IACDA,EAAMiE,yBAAyB7E,GAC5BR,EAAOW,SACRS,EAAMkE,aAAatF,EAAOW,SAE5BS,EAAMmE,aAGT,CAAChJ,EAAIC,IAGN,sBAAKb,UAAU,aAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BW,IAC9B,sBAAKX,UAAU,cAAf,UAA8BsE,EAAQ,WAAOuD,YAAqCvD,IAAc,GAAhG,OACA,sBAAKtE,UAAU,aAAf,UAA6BwE,EAA7B,UAED1D,GAAS,qBAAKd,UAAU,UAAf,SACPc,EAAMyC,KAAI,SAAC4B,EAAK1B,GAAN,OAAgB,qBAAKzD,UAAS,qBAAgBmF,IAAST,GAAY,YAA0Bd,QAAS,kBAlCnG,SAAA9C,GAClB6D,EAAY7D,GACZF,EAAM,KAAKiJ,KAAKjJ,GAAV,UAAoBA,EAApB,kBAAiCE,GAAjC,UAA8CF,EAA9C,kBAA2DE,GACjE4F,EAAkB9F,EAAIyD,EAAOW,SA+B8F8E,CAAY3E,IAAxG,SAAgHA,GAA1C1B,QAEnG,qBAAKzD,UAAU,SAAS+J,IAAK7F","file":"static/js/11.474a9352.chunk.js","sourcesContent":["\r\nimport './info.less'\r\nimport Table from './Table'\r\nimport { useParams } from 'react-router-dom'\r\nimport { formatAddress } from '../../../utils/utils'\r\nimport DeriNumberFormat from '../../../utils/DeriNumberFormat'\r\nimport moment from 'moment'\r\nimport Chart from './Chart'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst LIQUIDITY_HEADER = ['ACTION','ACCOUNT','LIQUIDITY','AMOUNT','TIMESTAMP (UTC)']\r\nconst LIQUIDITY_COLUMNS = ['action','account','notional','amount','timestamp']\r\nconst GET_LIQUIDITY_URL = `${process.env.REACT_APP_INFO_HTTP_URL}`\r\n\r\nconst TRADE_HEADER = ['DIRECTION','ACCOUNT','SYMBOL','PRICE','VOLUME','NOTIONAL','TIMESTAMP (UTC)']\r\nconst TRADE_COLUMNS = ['direction','account','symbol','price','volume','notional','timestamp']\r\n\r\n\r\nconst columnFormat = {\r\n  account : data => formatAddress(data.account),\r\n  timestamp : data =>  moment(new Date(data.timestamp * 1000)).utc().format('YYYY-MM-DD HH:mm:ss'),\r\n  notional : data => <DeriNumberFormat value={data.notional} prefix='$' thousandSeparator={true} decimalScale={5}/>,  \r\n  amount : data =>  <DeriNumberFormat value={data.amount} suffix={` ${data.bToken}`} thousandSeparator={true} decimalScale={5}/> ,\r\n  price : data =>  <DeriNumberFormat value={data.price} thousandSeparator={true}  decimalScale={5}/>,\r\n  direction : data => <span className={`direction ${data.direction}`}>{data.direction}</span>,\r\n  action : data => <span className={`action ${data.action}`}>{data.action}</span>\r\n}\r\n\r\n\r\nexport default function Detail(){\r\n  const {network,add,catalog,bToken} =  useParams();\r\n  const getLiquidityDataUrl = `${GET_LIQUIDITY_URL}/get_liquidity?pool=${add}`\r\n  const getTradeDataUrl = `${GET_LIQUIDITY_URL}/get_trade?pool=${add}`\r\n\r\n  return(\r\n    <div className='info'>\r\n    <div className='title'><Link to='/info'>Deri Overview</Link> &gt; {`${network} - ${catalog.toUpperCase()} - ${formatAddress(add)} (${bToken})`}</div>\r\n      <div className='chart-box'>\r\n        <div className='chart'><Chart title='TVL' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_liquidity_history?pool=${add}`} seriesType='area'/> </div>\r\n        <div className='chart'><Chart title='Volume 24H' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_trade_history?pool=${add}`} seriesType='histogram' cycle={['W','M']} defaultCycle='M'/> </div>\r\n      </div>\r\n      <div className='table-by-network'>\r\n        <Table title='LIQUIDITY' headers={LIQUIDITY_HEADER} columns={LIQUIDITY_COLUMNS} columnRenders={columnFormat} url={getLiquidityDataUrl} pagination={true}/>\r\n        <Table title='TRADE' headers={TRADE_HEADER} columns={TRADE_COLUMNS} columnRenders={columnFormat}  url={getTradeDataUrl} pagination={true}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React,{useState,useEffect} from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function DeriNumberFormat(props){\r\n  const [renderablity, setRenderablity] = useState(<span className='loading-line'></span>);\r\n\r\n  useEffect(() => {\r\n    const {allowZero,...others} = props \r\n    if(((typeof props.value !== 'object' && props.value !== undefined && props.value !== '' && props.value !== 'NaN') || ((isNaN(props.value) && Math.abs(props.value)) === 0 && allowZero === true ))) {\r\n      setRenderablity(<NumberFormat {...others} displayType = 'text' />)\r\n    } \r\n    return () => {};\r\n  }, [props.value]);\r\n\r\n  return renderablity;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nfunction Table({title,dataSet,url,headers,columns,columnRenders = {},pagination,loading,onRowClick}){\r\n  const [data, setData] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [count, setCount] = useState()\r\n  const [pageSize, setPageSize] = useState(10)\r\n\r\n  const loadData = async (url,page) => {\r\n    let restUrl = url;\r\n    if(pagination){\r\n      restUrl = `${restUrl}&page=${page}&page_amount=${pageSize}`\r\n    }\r\n    loading.loading()\r\n    const res = await axios.get(restUrl);\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      setCount(res.data.count / pageSize)\r\n      if(res.data.count % pageSize > 0 ){\r\n        setCount(Math.floor(res.data.count / pageSize) +1)\r\n      }\r\n      setData(res.data.data)\r\n      setPage(page)\r\n      loading.loaded()\r\n    }\r\n  }\r\n\r\n  const prePage = () => {\r\n    if(page === 1){\r\n      return;\r\n    }\r\n    loadData(url,page - 1)\r\n  }\r\n  const nextPage = () => {\r\n    if(page === count){\r\n      return;\r\n    }\r\n\r\n    loadData(url,page +1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(dataSet){\r\n      setData(dataSet)\r\n    } else {\r\n      loadData(url,1);\r\n    }\r\n  }, [url])\r\n  return(\r\n    <div className='info-table'>\r\n      <div className='t-title'>{title}</div>\r\n      <div className='tbody'>\r\n        <div className='theader'>\r\n          {headers.map((header,index) => <div className='col' key={index}>{header}</div>)}\r\n        </div>\r\n        {data.length > 0 ? data.map((d,index) => (\r\n          <div className='row' key={index} onClick={() => onRowClick && onRowClick(d)} style={{cursor : onRowClick ? 'pointer' : 'normal'}}>\r\n            {columns.map((col,index) => <div className='col' key={index}>{columnRenders[col] ? columnRenders[col].call(null,d) :d[col]}</div>)}\r\n          </div>))\r\n          :\r\n          <div className='row'><div className='col no-data'>No Data</div></div>\r\n          }\r\n         \r\n\r\n        {pagination && data.length > 0 && <div className='pagination row'>\r\n          <span className='arrow' onClick={prePage}> &lt; </span><span>Page {page} of {count}</span><span className='arrow' onClick={nextPage}> &gt; </span>\r\n        </div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default inject('loading')(observer(Table))","import { useRef,useEffect,useState } from \"react\"\r\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\r\nimport axios from \"axios\";\r\nimport dateFormat from 'dateformat'\r\nimport { convertToInternationalCurrencySystem } from \"../../../utils/utils\";\r\n\r\nexport default function AreaSeries({title,url,seriesType,cycle,defaultCycle}){\r\n  const chartRef = useRef(null);\r\n  const seriesChartRef = useRef(null);\r\n  const series = useRef(null)\r\n  const [curValue, setCurValue] = useState('')\r\n  const [curDate, setCurDate] = useState('')\r\n  const [curCycle, setCurCycle] = useState(defaultCycle)\r\n  const lastDataRef = useRef()\r\n\r\n\r\n  const initChart = () => {\r\n    const rect = document.querySelector('.info-chart').getBoundingClientRect()\r\n    const chart = createChart(chartRef.current, { \r\n      localization : {\r\n        priceFormatter: price => '$ ' + convertToInternationalCurrencySystem(price),\r\n        locale: 'en-US'\r\n      },\r\n      timeScale: {\r\n        rightOffset : 0,\r\n        leftOffset : 5,\r\n        timeVisible : true,\r\n        borderColor : '#fff',\r\n        borderVisible :  false\r\n      },\r\n      width: rect.width,\r\n      height: 200,\r\n      priceScale: {\r\n        position: 'none',\r\n        borderColor: '#fff',\r\n        borderVisible : false,\r\n        mode: 0,\r\n        scaleMargins: {\r\n          top: 0.35,\r\n          // bottom : 0\r\n        },\r\n      },\r\n\r\n      handleScroll: false,\r\n      handleScale: false,\r\n      crosshair: {\r\n        mode: CrosshairMode.Normal,  \r\n        vertLine: {\r\n          labelVisible : false,  \r\n          visible : false\r\n        },\r\n        horzLine: {\r\n          labelVisible : false,  \r\n          visible : false\r\n        },\r\n      },\r\n      grid: {\r\n        vertLines: {\r\n          visible: false,\r\n        },\r\n        horzLines: {\r\n          visible: false,\r\n        },\r\n      },\r\n      layout: {\r\n        backgroundColor: '#212327',\r\n        textColor: '#fff',\r\n        fontSize: 12\r\n      },\r\n    });\r\n    seriesChartRef.current = chart\r\n    return chart;\r\n  }\r\n\r\n  const crosshairMove = param => {\r\n      if (!param.point) {\r\n        setCurDate('')\r\n        if(lastDataRef.current){\r\n          setCurValue(lastDataRef.current)\r\n        }\r\n        return;\r\n      }\r\n      param.seriesPrices.forEach(item => {\r\n        if(item){\r\n          setCurValue(item)\r\n        }\r\n      })\r\n      param.time && setCurDate(`${param.time.year}-${param.time.month}-${param.time.day} (UTC)`)\r\n  }\r\n\r\n  const addAreaSeries = async(chart) => {\r\n    const areaSeries = chart.addAreaSeries({\r\n      priceLineVisible : false,\r\n      lastValueVisible: false,\r\n      topColor: 'RGBA(0,101,159,.5)',\r\n      bottomColor: 'RGBA(0,101,159,0)',\r\n      lineColor: 'RGB(0,101,159)',\r\n      priceFormat: {        \r\n        precision: 1,\r\n        minMove : '1000',\r\n      }\r\n    })\r\n  \r\n    \r\n    const res = await axios.get(url)\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      let data = res.data.data.sort((item1,item2) => {\r\n        if(item1.timestamp > item2.timestamp) {\r\n          return 1\r\n        } else if(item1.timestamp < item2.timestamp){\r\n          return -1\r\n        } else {\r\n          return 0\r\n        }\r\n      })\r\n      data = data.map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : d.value}))\r\n      areaSeries.setData(data)\r\n      const last = data[data.length -1].value\r\n      setCurValue(last)\r\n      lastDataRef.current = last\r\n    }\r\n    series.current = areaSeries\r\n    chart.timeScale().fitContent();\r\n    return areaSeries;\r\n  }\r\n\r\n  const loadHistogramData = async (url,histogramSeries) => {\r\n    const res = await axios.get(url)\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      const data = res.data.data.sort((item1,item2) => {\r\n        if(item1.timestamp > item2.timestamp) {\r\n          return 1\r\n        } else if(item1.timestamp < item2.timestamp){\r\n          return -1\r\n        } else {\r\n          return 0\r\n        }\r\n      }).map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : Number(d.value)}))\r\n      const last = res.data.last_24h ? res.data.last_24h : res.data[data.length -1].value\r\n      histogramSeries.setData(data)\r\n      setCurValue(last)\r\n      lastDataRef.current = last\r\n      seriesChartRef.current && seriesChartRef.current.timeScale().fitContent();\r\n    }\r\n  }\r\n\r\n  const addHistogramSeries = async (chart) => {\r\n    const histogramSeries = chart.addHistogramSeries({\r\n      color: '#00659F',\r\n      priceLineVisible : false,\r\n      lastValueVisible: false,\r\n      priceFormat: {\r\n        type: \"volume\",\r\n        priceFormatter: price => '$ ' + price\r\n      }\r\n    })\r\n    histogramSeries.priceScale().applyOptions({\r\n      scaleMargins: {\r\n        top: 0.25,\r\n        bottom: 0,\r\n      },\r\n    });    \r\n    loadHistogramData(url,histogramSeries)\r\n    series.current = histogramSeries\r\n    return histogramSeries;\r\n  }\r\n\r\n  const cycleSelect = cycle => {\r\n    setCurCycle(cycle)\r\n    url = /\\?/.test(url) ? `${url}&cycle=${cycle}` : `${url}?cycle=${cycle}`\r\n    loadHistogramData(url,series.current)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const chart = initChart();\r\n    if(seriesType === 'area'){\r\n      addAreaSeries(chart)\r\n    }\r\n    if(seriesType === 'histogram'){\r\n      addHistogramSeries(chart)\r\n    }\r\n    chart.subscribeCrosshairMove(crosshairMove);\r\n    return () => {\r\n      if(chart){\r\n        chart.unsubscribeCrosshairMove(crosshairMove)\r\n        if(series.current){\r\n          chart.removeSeries(series.current);\r\n        }\r\n        chart.remove();\r\n      }\r\n    }\r\n  }, [url,seriesType])\r\n\r\n  return(\r\n    <div className='info-chart'>\r\n      <div className='chart-title'>\r\n        <div className='title-label'>{title}</div>\r\n        <div className='title-value'>{curValue ? `$${convertToInternationalCurrencySystem(curValue)}` : ''} </div>\r\n        <div className='title-date'>{curDate} </div>\r\n      </div>\r\n      {cycle && <div className='cycle-c'>\r\n        {cycle.map((item,index) => <div className={`cycle-item ${item === curCycle && 'selected'}`} key={index} onClick={() => cycleSelect(item)}>{item}</div>)}\r\n      </div>}\r\n      <div className='series' ref={chartRef}></div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}