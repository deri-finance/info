{"version":3,"sources":["desktop/pages/Broker/BrokerBind.js","components/Button/Button.js","components/Broker/BrokerBind.js"],"names":["Bind","lang","Button","btnText","className","disabled","click","afterClick","checkApprove","wallet","spec","useState","status","setStatus","isApproved","setIsApproved","pending","setPending","buttonText","setbuttonText","loadRef","useRef","onClick","a","beforeAction","afterAction","current","style","display","loadApproveStatus","detail","account","pool","bTokenId","res","approve","success","alert","useEffect","ref","marginRight","inject","observer","address","setAddress","isBind","setIsBind","BindBroker","undefined","bindAddress","toLocaleLowerCase","length","indexOf","setBroker","chainId","console","log","getBroker","path","fetchRestApi","data","broker_address","type","placeholder","value","onChange","event","target","addressChange"],"mappings":"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","file":"static/js/31.76fde606.chunk.js","sourcesContent":["import BrokerBind from '../../../components/Broker/BrokerBind'\nimport \"./Bind.less\"\nexport default function Bind({lang}){\n  return (\n    <BrokerBind lang={lang}/>\n  )\n}","import {useState,useRef,useEffect} from 'react';\nexport default function Button({btnText,className,disabled,click,afterClick,checkApprove,wallet,spec,lang}){\n  const [status, setStatus] = useState(disabled ? 'disabled' : 'enabled');\n  const [isApproved, setIsApproved] = useState(true);\n  const [pending, setPending] = useState(false);\n  const [buttonText, setbuttonText] = useState(btnText)\n  const loadRef = useRef(null)\n\n  const onClick = async () => {\n    if(status !== 'enabled') {\n      return ;\n    }\n    beforeAction()\n    const result = await click();    \n    if(result){\n      afterClick && afterClick()\n    } \n    afterAction()\n  }\n\n  const beforeAction = ()  => {\n    setStatus('disabled')\n    setPending(true);\n    loadRef.current && (loadRef.current.style.display = 'inline-block')\n  }\n\n  const afterAction = () => {\n    loadRef.current && (loadRef.current.style.display = 'none')\n    setStatus('enabled')\n    setPending(false);\n  }\n\n  const loadApproveStatus = async () => {\n    if(checkApprove && wallet && wallet.detail.account){\n      const res = await wallet.isApproved(spec.pool,spec.bTokenId)\n      setIsApproved(res);\n    }\n  }\n  const approve = async () => {\n    beforeAction();\n    const res = await wallet.approve(spec.pool,spec.bTokenId);\n    if(res.success){\n      setIsApproved(true);\n    } else {\n      setIsApproved(false)\n      alert(lang['approve-failed'])\n    }\n    afterAction();\n  }\n\n  const action = () => {\n    if(isApproved){\n      onClick();\n    } else {\n      approve();\n    }\n  }\n\n  useEffect(() => {\n    loadApproveStatus();\n    return () => {};\n  }, [wallet,spec,checkApprove]);\n\n  useEffect(() => {\n    if(btnText){\n      setbuttonText(btnText)\n    }\n    return () => {\n    }\n  }, [btnText])\n\n  return(\n    <button className={className} onClick={action} >\n        <span className='btn-loading-wrap'>\n          <span ref={loadRef}\n            className='spinner spinner-border spinner-border-sm'\n            style={{display : 'none' ,marginRight : '2'}}>\n          </span>\n        </span>\n          {pending ? lang['pending'] : (isApproved ? buttonText : lang['approve'])  }\n        </button>\n  )\n}","import React,{useState,useEffect} from 'react'\nimport {inject,observer} from 'mobx-react'\nimport Button from '../Button/Button';\nimport {\n  fetchRestApi,\n  setBroker,\n} from \"../../lib/web3js/indexV2\";\nfunction BrokerBind({wallet={},lang}){\n  const [address,setAddress] = useState()\n  const [isBind,setIsBind] = useState(true)\n  \n  const hasConnectWallet = () => wallet && wallet.detail && wallet.detail.account\n\n  const BindBroker = async ()=>{\n    if( hasConnectWallet()){\n      if(address === undefined){\n        alert(lang['please-enter-address']) \n        return;\n      }\n      let bindAddress = address.toLocaleLowerCase();\n      if(bindAddress.length !== 42 || bindAddress.indexOf('0x') !== 0){\n        alert(lang['please-enter-a-correct-address']) \n        return;\n      }\n      if(bindAddress === wallet.detail.account){\n        alert(lang['brokder-addr-cannot-be-the-same-as-trader']) \n        return;\n      }\n      if(isBind){\n        alert(lang['cannot-bind-twice']) \n        return;\n      }\n      let res = await setBroker(wallet.detail.chainId,wallet.detail.account,address)\n      console.log(res)\n      if(!res.success){\n        alert(lang['bind-faild'])\n      }\n      if(res.success){\n        setIsBind(true)\n      }\n    }\n  }\n\n  const getBroker = async() =>{\n    let path = `/broker/${wallet.detail.account}/get_broker`\n    let res =  await fetchRestApi(path)\n    if(res.data){\n      if(res.data.length){\n        setIsBind(true)\n        setAddress(res.data[0].broker_address)\n      }else{\n        setIsBind(false)\n      }\n    }else{\n      setIsBind(false)\n    }\n  }\n\n  const addressChange = event =>{\n    let {value} = event.target\n    setAddress(value)\n  }\n  useEffect(()=>{\n    getBroker();\n  },[wallet.detail])\n  return(\n    <div className='broker-bind'>\n      <div className='header'>\n        {lang['brokers-address']}\n      </div>\n      <div className='bind-input'>\n        <div className='address'>\n          <input className='address-input' type='text'\n          placeholder={lang['address']}\n          value={address}   \n          onChange={event =>  addressChange(event) }\n          />\n        </div>\n        <div className='bind-button'>\n          <Button className='btn' btnText={lang['bind']} lang={lang} click={BindBroker} />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default inject('wallet')(observer(BrokerBind))"],"sourceRoot":""}