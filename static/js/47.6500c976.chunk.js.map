{"version":3,"sources":["mobile/pages/Faucet/Faucet.js","components/Button/Button.js","components/Faucet/Faucet.js"],"names":["lang","Button","btnText","className","disabled","click","afterClick","checkApprove","wallet","spec","useState","status","setStatus","isApproved","setIsApproved","pending","setPending","buttonText","setbuttonText","loadRef","useRef","onClick","a","beforeAction","afterAction","current","style","display","loadApproveStatus","detail","account","pool","bTokenId","res","approve","success","alert","useEffect","ref","marginRight","inject","observer","bToken","hasConnectWallet","mintTBUSD","mintTERC20","chainId","mintTWETH","class","target","href"],"mappings":"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","file":"static/js/47.6500c976.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n\r\nimport Faucet from '../../../components/Faucet/Faucet'\r\nimport './faucet.less'\r\nexport default function({lang}){\r\n  return(\r\n    <div>\r\n      <Faucet lang={lang} />\r\n    </div>\r\n  )\r\n}","import {useState,useRef,useEffect} from 'react';\r\nexport default function Button({btnText,className,disabled,click,afterClick,checkApprove,wallet,spec,lang}){\r\n  const [status, setStatus] = useState(disabled ? 'disabled' : 'enabled');\r\n  const [isApproved, setIsApproved] = useState(true);\r\n  const [pending, setPending] = useState(false);\r\n  const [buttonText, setbuttonText] = useState(btnText)\r\n  const loadRef = useRef(null)\r\n\r\n  const onClick = async () => {\r\n    if(status !== 'enabled') {\r\n      return ;\r\n    }\r\n    beforeAction()\r\n    const result = await click();    \r\n    if(result){\r\n      afterClick && afterClick()\r\n    } \r\n    afterAction()\r\n  }\r\n\r\n  const beforeAction = ()  => {\r\n    setStatus('disabled')\r\n    setPending(true);\r\n    loadRef.current && (loadRef.current.style.display = 'inline-block')\r\n  }\r\n\r\n  const afterAction = () => {\r\n    loadRef.current && (loadRef.current.style.display = 'none')\r\n    setStatus('enabled')\r\n    setPending(false);\r\n  }\r\n\r\n  const loadApproveStatus = async () => {\r\n    if(checkApprove && wallet && wallet.detail.account){\r\n      const res = await wallet.isApproved(spec.pool,spec.bTokenId)\r\n      setIsApproved(res);\r\n    }\r\n  }\r\n  const approve = async () => {\r\n    beforeAction();\r\n    const res = await wallet.approve(spec.pool,spec.bTokenId);\r\n    if(res.success){\r\n      setIsApproved(true);\r\n    } else {\r\n      setIsApproved(false)\r\n      alert(lang['approve-failed'])\r\n    }\r\n    afterAction();\r\n  }\r\n\r\n  const action = () => {\r\n    if(isApproved){\r\n      onClick();\r\n    } else {\r\n      approve();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadApproveStatus();\r\n    return () => {};\r\n  }, [wallet,spec,checkApprove]);\r\n\r\n  useEffect(() => {\r\n    if(btnText){\r\n      setbuttonText(btnText)\r\n    }\r\n    return () => {\r\n    }\r\n  }, [btnText])\r\n\r\n  return(\r\n    <button className={className} onClick={action} >\r\n        <span className='btn-loading-wrap'>\r\n          <span ref={loadRef}\r\n            className='spinner spinner-border spinner-border-sm'\r\n            style={{display : 'none' ,marginRight : '2'}}>\r\n          </span>\r\n        </span>\r\n          {pending ? lang['pending'] : (isApproved ? buttonText : lang['approve'])  }\r\n        </button>\r\n  )\r\n}","/* eslint-disable react/jsx-no-target-blank */\r\nimport React,{useEffect,useState} from 'react'\r\nimport {inject,observer} from 'mobx-react'\r\nimport Button from '../Button/Button'\r\nimport {mintTERC20} from '../../lib/web3js/indexV2'\r\nfunction Faucet({wallet={},lang}){\r\n  const bToken = {\r\n    \"tbusd\" : \"0xaa2B8115c094445e96C2CD951c17a30F41867323\",\r\n    \"tweth\" : \"0x8e60B350FA4fbaF209712bB721373364DE858A5d\",\r\n  }\r\n  const hasConnectWallet = () => wallet && wallet.detail && wallet.detail.account\r\n  \r\n  const mintTBUSD = async ()=>{\r\n    if(hasConnectWallet()){\r\n      let res = await mintTERC20(wallet.detail.chainId,bToken.tbusd,wallet.detail.account)\r\n      if(res.success){\r\n\r\n      }\r\n    }\r\n  }\r\n  const mintTWETH = async ()=>{\r\n    if(hasConnectWallet()){\r\n      let res = await mintTERC20(wallet.detail.chainId,bToken.tweth,wallet.detail.account)\r\n      if(res.success){\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className='faucet-box'>\r\n      <div class='title'>\r\n        {lang['obtain-testnet-token']}\r\n      </div>\r\n      <div class='BUSD'>\r\n        <Button className='btn' click={mintTBUSD} btnText={lang['tbusd']} lang={lang} />\r\n      </div>\r\n      <div class='WETH'>\r\n      <Button className='btn' click={mintTWETH} btnText={lang['tweth']} lang={lang} />\r\n      </div>\r\n      <div class='go-to-bnb'>\r\n        {lang['go-to-bnb']}\r\n      </div>\r\n      <div class='BNB'>\r\n        <a target=\"_blank\" href='https://testnet.binance.org/faucet-smart'>\r\n          {lang['bnb']}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default inject('wallet')(observer(Faucet))"],"sourceRoot":""}