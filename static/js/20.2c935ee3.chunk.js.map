{"version":3,"sources":["../../src/index.ts","../node_modules/eth-provider/browser.js","../node_modules/eth-provider/resolve/index.js","../node_modules/eth-provider/provider/index.js","../node_modules/ethereum-provider/index.js","../node_modules/eth-provider/ConnectionManager/index.js","../node_modules/eth-provider/presets/index.js","../node_modules/eth-provider/connections/injected.js","../node_modules/eth-provider/connections/unavailable.js","../node_modules/eth-provider/connections/ws.js","../node_modules/eth-provider/parse/index.js","../node_modules/eth-provider/connections/http.js"],"names":["AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","resolve","require","provider","presets","injected","ethereum","window","web3","currentProvider","ws","WebSocket","XHR","XMLHttpRequest","__isProvider","connections","ipc","http","module","exports","targets","options","getProtocol","location","endsWith","startsWith","concat","map","type","protocol","filter","console","log","EventEmitter","EthereumProvider","ConnectionManager","monitor","update","status","emit","async","check","inSetup","setTimeout","send","e","on","t","indexOf","setMaxListeners","constructor","connection","super","this","connected","nextId","promises","subscriptions","checkConnection","payload","id","method","error","result","reject","params","subscription","event","listener","attemptedNetworkSubscription","startNetworkSubscription","attemptedAccountsSubscription","startAccountsSubscription","_send","listenerCount","networkChanged","subscribe","netId","warn","accountsChanged","accounts","enable","Promise","then","length","coinbase","err","Error","code","catch","Array","jsonrpc","promise","_sendBatch","requests","all","push","unsubscribe","success","_id","removeAllListeners","sendAsync","cb","sendAsyncBatch","results","entry","index","isConnected","close","forEach","dev","process","interval","name","connect","message","connectionError","summary","closing","refresh","target","data","clearTimeout","connectTimer","closed","frame","direct","infura","infuraRopsten","infuraRinkeby","infuraKovan","InjectedConnection","_injected","UnavailableConnection","parse","WebSocketConnection","_WebSocket","url","create","socket","addEventListener","payloads","load","isArray","onClose","readyState","CONNECTING","_","JSON","stringify","last","timeout","res","values","replace","split","uuid","HTTPConnection","_XHR","pollId","init","response","pollSubscriptions","subscriptionTimeout","p","n","filterStatus","statusText","internal","xhr","responded","abort","open","setRequestHeader","onerror","ontimeout","onreadystatechange","responseText","UserRejectedRequestError","FrameConnector","kwargs","handleNetworkChanged","chainId","networkId","handleChainChanged","handleAccountsChanged","account","handleClose","ethProvider","deactivate"],"mappings":"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","file":"static/js/20.2c935ee3.chunk.js","sourcesContent":["import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport ethProvider from 'eth-provider'\nimport invariant from 'tiny-invariant'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nexport class FrameConnector extends AbstractConnector {\n  private provider: any\n\n  constructor(kwargs: Required<AbstractConnectorArguments>) {\n    invariant(kwargs.supportedChainIds.length === 1, 'This connector only supports 1 chainId at the moment.')\n    super(kwargs)\n\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  private handleNetworkChanged(networkId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'networkChanged' event with payload\", networkId)\n    }\n    this.emitUpdate({ provider: this.provider, chainId: networkId })\n  }\n\n  private handleChainChanged(chainId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts.length === 0 ? null : accounts[0] })\n  }\n\n  private handleClose(code: number, reason: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'close' event with payload\", code, reason)\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      this.provider = ethProvider('frame')\n    }\n\n    this.provider\n      .on('networkChanged', this.handleNetworkChanged)\n      .on('chainChanged', this.handleChainChanged)\n      .on('accountsChanged', this.handleAccountsChanged)\n      .on('close', this.handleClose)\n\n    const account = await this.provider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        if (error && (error as any).code === 4001) {\n          throw new UserRejectedRequestError()\n        } else {\n          throw error\n        }\n      })\n\n    return { provider: this.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider\n      .removeListener('networkChanged', this.handleNetworkChanged)\n      .removeListener('chainChanged', this.handleChainChanged)\n      .removeListener('accountsChanged', this.handleAccountsChanged)\n      .removeListener('close', this.handleClose)\n  }\n}\n","const resolve = require('./resolve')\nconst provider = require('./provider')\nconst presets = require('./presets')\n\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n}\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null\n\nif (injected.ethereum) injected.ethereum.__isProvider = true\n\nconst connections = {\n  injected: injected.ethereum || require('./connections/injected')(injected.web3),\n  ipc: require('./connections/unavailable')('IPC connections are unavliable in the browser'),\n  ws: require('./connections/ws')(ws),\n  http: require('./connections/http')(XHR)\n}\n\nmodule.exports = (targets = ['injected', 'frame'], options = {}) => provider(connections, resolve(targets, presets), options)\n","const getProtocol = location => {\n  if (location === 'injected') return 'injected'\n  if (location.endsWith('.ipc')) return 'ipc'\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws'\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http'\n  return ''\n}\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({ type: provider, location, protocol: getProtocol(location) }))\n    } else {\n      return { type: 'custom', location: provider, protocol: getProtocol(provider) }\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"')\n      return false\n    }\n  })\n}\n","const EventEmitter = require('events')\nconst EthereumProvider = require('ethereum-provider')\nconst ConnectionManager = require('../ConnectionManager')\n\nconst monitor = provider => {\n  function update (status) {\n    provider.status = status\n    if (provider instanceof EventEmitter) provider.emit('status', status)\n  }\n  async function check () {\n    if (provider.inSetup) return setTimeout(check, 1000)\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing')\n        setTimeout(() => check(), 5000)\n      } else {\n        update('connected')\n      }\n    } catch (e) {\n      update('disconnected')\n    }\n  }\n  update('loading')\n  check()\n  provider.on('connect', () => check())\n  provider.on('close', () => update('disconnected'))\n  return provider\n}\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider\n    return monitor(connections.injected)\n  }\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options))\n  provider.setMaxListeners(128)\n  return monitor(provider)\n}\n","const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n","const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', (summary) => {\n        this.connected = false\n        this.emit('close')\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected')\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n","module.exports = {\n  injected: ['injected'],\n  frame: ['ws://127.0.0.1:1248', 'http://127.0.0.1:1248'],\n  direct: ['ws://127.0.0.1:8546', 'http://127.0.0.1:8545'], // IPC paths will be prepended in Node/Electron\n  infura: ['wss://mainnet.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://mainnet.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRopsten: ['wss://ropsten.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://ropsten.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRinkeby: ['wss://rinkeby.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://rinkeby.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraKovan: ['wss://kovan.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://kovan.infura.io/v3/786ade30f36244469480aa5c2bf0743b']\n}\n","const EventEmitter = require('events')\n\nclass InjectedConnection extends EventEmitter {\n  constructor (_injected, options) {\n    super()\n    if (_injected) {\n      setTimeout(() => this.emit('error', new Error('Injected web3 provider is not currently supported')), 0)\n    } else {\n      setTimeout(() => this.emit('error', new Error('No injected provider found')), 0)\n    }\n  }\n}\n\nmodule.exports = injected => options => new InjectedConnection(injected, options)\n","const EventEmitter = require('events')\n\nclass UnavailableConnection extends EventEmitter {\n  constructor (message) {\n    super()\n    setTimeout(() => this.emit('error', new Error(message)), 0)\n  }\n}\n\nmodule.exports = message => () => new UnavailableConnection(message)\n","const EventEmitter = require('events')\nconst parse = require('../parse')\nconst dev = process.env.NODE_ENV === 'development'\n\nlet WebSocket\n\nclass WebSocketConnection extends EventEmitter {\n  constructor (_WebSocket, url, options) {\n    super()\n    WebSocket = _WebSocket\n    setTimeout(() => this.create(url, options), 0)\n  }\n\n  create (url, options) {\n    if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'))\n    try { this.socket = new WebSocket(url) } catch (e) { return this.emit('error', e) }\n    this.socket.addEventListener('error', err => this.emit('error', err))\n    this.socket.addEventListener('open', () => {\n      this.emit('connect')\n      this.socket.addEventListener('message', message => {\n        const data = typeof message.data === 'string' ? message.data : ''\n        parse(data, (err, payloads) => {\n          if (err) return //\n          payloads.forEach(load => {\n            if (Array.isArray(load)) {\n              load.forEach(payload => this.emit('payload', payload))\n            } else {\n              this.emit('payload', load)\n            }\n          })\n        })\n      })\n      this.socket.addEventListener('close', () => this.onClose())\n    })\n  }\n\n  onClose () {\n    this.socket = null\n    this.closed = true\n    if (dev) console.log('Closing WebSocket connection')\n    this.emit('close')\n    this.removeAllListeners()\n  }\n\n  close () {\n    if (this.socket) {\n      this.socket.close()\n    } else {\n      this.onClose()\n    }\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n      setTimeout(_ => this.send(payload), 10)\n    } else if (!this.socket || this.socket.readyState > 1) {\n      this.connected = false\n      this.error(payload, 'Not connected')\n    } else {\n      this.socket.send(JSON.stringify(payload))\n    }\n  }\n}\n\nmodule.exports = WebSocket => (url, cb) => new WebSocketConnection(WebSocket, url, cb)\n","let last, timeout\n\nmodule.exports = (res, cb) => {\n  const values = []\n  res\n    .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|')\n    .forEach(data => {\n      if (last) data = last + data // prepend the last chunk\n      let result\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        last = data\n        clearTimeout(timeout) // restart timeout\n        timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000)\n        return\n      }\n      clearTimeout(timeout)\n      last = null\n      if (result) values.push(result)\n    })\n  cb(null, values)\n}\n","const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n"],"sourceRoot":""}